---
title: '[CH] Chord'
eleventyNavigation:
  order: 10
state:
  synth:
    oscillator:
      type: 'sine'
    envelope:
      decay: 0
      sustain: 1
      release: 0.005
    suboscillators:
      - detune: 400
      - detune: 700
---

{% from "macros/tone.njk" import amplitudeEnvelope, omniOscillator %}
{% from "macros/nexus.njk" import piano %}

<div class="grid">
  {{ omniOscillator('Oscillator', 'synth-oscillator', type=state.synth.oscillator.type) }}
  {{ omniOscillator('Suboscillator 1', 'synth-suboscillators-0', detune=state.synth.suboscillators[0].detune) }}
  {{ omniOscillator('Suboscillator 2', 'synth-suboscillators-1', detune=state.synth.suboscillators[1].detune) }}
  {{ amplitudeEnvelope('Envelope', 'synth-envelope', decay=state.synth.envelope.decay, sustain=state.synth.envelope.sustain, release=state.synth.envelope.release) }}
</div>

{{ piano('piano') }}

{% js %}
  import { Midi, start } from 'https://cdn.skypack.dev/tone';
  import { createAmplitudeEnvelope, createOmniOscillator, createPiano, MultiSynth } from '../../public/lib/nexus-tone-components.js';

  const options = {{ state | dump | safe }};

  const synth = new MultiSynth(options.synth).toDestination();

  const onMidi = ([status, data0, data1]) => {
    const message = Math.floor(status / 16);
    const channel = status % 16;

    switch (message) {
      // note on
      case 9: {
        const freq = Midi(data0).toFrequency();
        synth.triggerAttack(freq, '+0', data1 / 127);
        break;
      }
      // note off
      case 8: {
        synth.triggerRelease();
        break;
      }
    }
  };

  createOmniOscillator('#synth-oscillator', value => {
    synth.set({ oscillator: value });
  });

  createOmniOscillator('#synth-suboscillators-0', value => {
    synth.set({ suboscillators: { 0: value } });
  });

  createOmniOscillator('#synth-suboscillators-1', value => {
    synth.set({ suboscillators: { 1: value } });
  });

  createAmplitudeEnvelope('#synth-envelope', value => {
    synth.set({ envelope: value });
  });

  createPiano('#piano', onMidi);

  document.addEventListener('click', async () => {
    await start();
    console.log('audio context resumed');
  }, { once: true });
{% endjs %}
