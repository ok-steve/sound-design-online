---
title: '[FX] Special FX'
eleventyNavigation:
  order: 12
state:
  noise:
    type: 'white'
  filter:
    frequency: '4m'
    baseFrequency: 20
    octaves: 6
    type: 'sawtooth'
    filter:
      type: 'bandpass'
      Q: 100
  reverb:
    roomSize: 0.2
    dampening: 1000
  transport:
    state: true
---

{% from "macros/tone.njk" import autoFilter, freeverb, noise, transport %}
{% from "macros/nexus.njk" import piano %}

<div class="grid">
  {{ noise('Noise', 'noise', type=state.noice.type) }}
  {{ autoFilter('Filter', 'filter', frequency=state.filter.frequency, baseFrequency=state.filter.baseFrequency, octaves=state.filter.octaves, type=state.filter.type, filterType=state.filter.filter.type, filterQ=state.filter.filter.Q) }}
  {{ freeverb('Reverb', 'reverb', roomSize=state.reverb.roomSize, dampening=state.reverb.dampening) }}
  {{ transport('Transport', 'transport', state=state.transport.state) }}
</div>

{{ piano('piano') }}

<script type="module">
  import { AutoFilter, Freeverb, Noise, Time, Transport, start } from 'https://cdn.skypack.dev/tone';
  import { createAutoFilter, createFreeverb, createNoise, createPiano, createTransport } from '../../public/lib/nexus-tone-components.js';

  const options = {{ state | dump | safe }};

  const noise = new Noise(options.noise);
  const filter = new AutoFilter(options.filter);
  filter._lfo.set('phase', 180);
  const reverb = new Freeverb(options.reverb);

  noise.connect(filter);
  filter.connect(reverb);
  reverb.toDestination();

  if (options.transport.bpm) {
    Transport.bpm.value = options.transport.bpm;
  }

  const onMidi = ([status, data0, data1]) => {
    const message = Math.floor(status / 16);
    const channel = status % 16;

    switch (message) {
      // note on
      case 9: {
        const len = Time(1 / filter.get('frequency').frequency).toSeconds();

        Transport.schedule(time => {
          reverb.set('roomSize', options.reverb.roomSize);
          reverb.roomSize.linearRampTo(0.8, len, time);
          filter.filter.Q.set(options.filter.filter.Q);
          filter.filter.Q.linearRampTo(0.1, len, time);
          noise.start(time).stop(time + len);
          filter.start(time).stop(time + len);
        }, Transport.nextSubdivision(len));
        break;
      }
    }
  };

  createNoise('#noise', value => {
    noise.set(value);
  });

  createAutoFilter('#filter', value => {
    filter.set(value);
  });

  createFreeverb('#reverb', value => {
    reverb.set(value);
  });

  createTransport('#transport', value => {
    Object.keys(value).forEach(key => {
      switch (key) {
        case 'bpm': {
          Transport.bpm.value = value[key];
          break;
        }
        case 'state': {
          if (value[key]) {
            Transport.start();
          } else {
            Transport.stop();
          }
        }
      }
    });
  });

  createPiano('#piano', onMidi);

  document.addEventListener('click', async () => {
    await start();

    if (options.transport.state) {
      Transport.start();
    }

    console.log('audio context resumed');
  }, { once: true });
</script>
